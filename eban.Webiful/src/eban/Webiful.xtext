grammar eban.Webiful hidden(WS, ML_COMMENT, SL_COMMENT)


generate webiful "http://www.ebansoftware.net/webiful"
		
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Webiful:
	(elements+=AbstractElement)*;

terminal ID  		: ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9')*;
	
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;
terminal OP_ASSIGN:'=';
terminal OP_OR:'||';
terminal OP_AND:'&&';
terminal OP_EQUALS:'==';
terminal OP_NOTEQUALS:'!=';
terminal OP_LESSTHAN:'<';
terminal OP_GREATERTHAN:'>';
terminal OP_LESSTHANEQUALS:'<=';
terminal OP_GREATERTHANEQUALS:'>=';
terminal OP_MAPTO:':';
terminal OP_UPTO:'..';
terminal OP_PLUS:'+';
terminal OP_MINUS:'-';
terminal OP_MULTUPLY:'*';
terminal OP_DIVIDE:'/';
terminal OP_MODULO:'%';
terminal OP_NOT:'!';
terminal OP_SHARP:'#';

terminal ANY_OTHER: .;

terminal DECIMAL :('0'..'9')+ '.'  ('0'..'9')+;
terminal INTEGER : ('0'..'9')+;

Literal:
	HashLiteral | IntegerLiteral | DecimalLiteral | StringLiteral 
;

DecimalLiteral:
	value=DECIMAL
;
IntegerLiteral:
	value=INTEGER
;
StringLiteral:
	value=STRING
;

HashLiteral:
	'json' '{' pairs+=HashPair (',' pairs+=HashPair)* '}' 
;

StrKeyType:
	name=StringLiteral
;
IdKeyType:
	name=ID 
;


KeyType:
	IdKeyType | StrKeyType
;
HashPair:
	key=(KeyType) OP_MAPTO value=Expression
;



PackageDeclaration:
	'package' name=QualifiedName '{'
	(elements+=AbstractElement)*
	'}';

AbstractElement:
	PackageDeclaration | Type | Import;

QualifiedName:
	ID (OP_DIVIDE ID)*;



Import:
	'import' importedNamespace=QualifiedName;


Type:
	Clazz | Entity | EntryPoint | Controller | DataType | MagicPhpBlock;

DataType:
	'datatype' name=ID;

Entity:
	'entity' name=ID (OP_MAPTO superType=[Entity])? '{'
	features+=EntityFeatureOrMagic*
	'}';
	
Clazz:
	'class' name=ID (OP_MAPTO superType=[Clazz])? params=Params?'{'
	features+=FeatureOrMagic*
	'}';
	
Controller:
	'controller' name=ID (OP_MAPTO superType=[Controller])? '{'
	features+=MethodOrMagic*
	'}';

MethodOrMagic:
	Method| MagicPhpBlock
;
FeatureOrMagic:
	Feature| MagicPhpBlock
;
EntityFeatureOrMagic:
	EntityProperty |Feature| MagicPhpBlock
;

Feature:
	Property | Method | 'new' ExpressionsBlock;

Property:
	'var' name=ID OP_MAPTO type=[Type];


EntityProperty:
	(OP_LESSTHAN many?='many'? key?='key'? ('column' column=ID)? OP_GREATERTHAN) propertyName=ID OP_MAPTO propertyType=[Type] 
;

Param:
	name=ID OP_MAPTO type=[Type] 
;

Params:
	'(' (
		list+=Param (',' list+=Param)* 
	) ')' | 
	{Params}
	'(' ')'
;


ParamCall:
	xp=Expression
;

ParamsCall:
	'(' (
		list+=ParamCall (',' list+=ParamCall)* 
	) ')' | 
	{ParamsCall}
	'(' ')'
;
	

Method:
	
	'fun' name=ID params=Params OP_MAPTO type=[Type] 
	methodBody=ExpressionsBlock
;	




ExpressionsBlock:
	{ExpressionsBlock}
	
	(
     '{' expressions+=Statement (expressions+=Statement)* '}' 
   	 | expressions+=Statement
	)
;


Expression:
	 terms=TerminalExpr (continuation+=ContinuationExpr)* 
	 
	 
;

ContinuationExpr:
	BinaryExpression | 
	PropertyCallExpr | 
	MethodCallExpr |
	IndexGetExpr 
;


BinaryExpression:
	binaryOp=Operator terms=TerminalExpr
;
UnaryExpression:
	binaryOp=UnaryOperator terms=TerminalExpr
;

PropertyCallExpr:
	'.' member=[Property | ID]
;
MethodCallExpr:
	'.' member=[Method | ID] methodsParams=ParamsCall
	
;

IndexGetExpr:
	'[' index=Expression ']'
	
;


AssignStatement:
	'set' target=Expression  OP_ASSIGN source=Expression 
	
;


TerminalExpr:
	(
		//UnaryExpression | 
		Literal | 
		VarCall | 
		Instantiation|
		MagicPhp 
		
	) 
;


Statement:
	  AssignStatement | LocalVarDecl | Return | For | If  | Expression   
;

If:
	'if' '(' condition=Expression')' then=ExpressionsBlock 'else' elseBlock=ExpressionsBlock
;

ForVar:
	name=ID OP_MAPTO type=[Type | QualifiedName]
;

For:
	'for' '(' forVar=ForVar 'in' condition=Expression ')' doBlock=ExpressionsBlock 
;

Return:
	'return' xp=Expression
;
	
MagicPhp:
	'_(' instr=STRING ')_'
;
MagicPhpBlock:
	'__(' instr=STRING ')__'
;




LocalVarDecl:
	'var' name=ID OP_MAPTO type=[Type | QualifiedName] (OP_ASSIGN assignment=Expression)
;

Instantiation:
	'new' caller=[Type] params=ParamsCall
;

This:
	{This}'this'
;

VarKinds:
	Param | LocalVarDecl | Property | ForVar 
;

VarCall:
	varKind=[VarKinds] | This
;

Operator:
	OP_OR | OP_AND | OP_EQUALS | OP_NOTEQUALS | 
	OP_LESSTHAN | OP_GREATERTHAN | OP_LESSTHANEQUALS |   
	OP_GREATERTHANEQUALS | OP_MAPTO | OP_UPTO |     
	OP_PLUS | OP_MINUS | OP_MULTUPLY | OP_DIVIDE | OP_MODULO 
	 
;

UnaryOperator:
	OP_NOT | OP_MINUS
;


Route:
	('GET' | 'POST') url=STRING '->' 
	ctrl=[Controller] '.' action=[Method] 'with' template=STRING	
;


Routes:
	{Routes}
	list+=Route*	
;

EntryPoint:
	'routes' '{' entryPointBody=Routes '}'
;	

