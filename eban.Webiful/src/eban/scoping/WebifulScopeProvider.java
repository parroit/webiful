/*
 * generated by Xtext
 */
package eban.scoping;

import eban.TypeSystemResolver;
import eban.webiful.Controller;
import eban.webiful.Expression;
import eban.webiful.MethodCallExpr;
import eban.webiful.PropertyCallExpr;
import eban.webiful.Route;
import eban.webiful.Type;


import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.generator.parser.antlr.splitting.simpleExpressions.MethodCall;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import com.google.common.collect.Lists;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class WebifulScopeProvider extends AbstractDeclarativeScopeProvider {

	

	@Override
	public IScope getScope(EObject context, EReference reference) {
		//EcoreUtil.resolveAll(context.eResource());
		if (reference.getName().equals("member")) {
			
			Type type=null;
			TypeSystemResolver typeSystemResolver = new TypeSystemResolver();
			
			
			
			try {
				if (context instanceof Expression)
					type=typeSystemResolver.resolveType((Expression)context,context);
				else if (context.eContainer() instanceof Expression)
					type=typeSystemResolver.resolveType((Expression)context.eContainer(),context);
				
			} catch (Throwable e) {
				System.out.println("Context: "+context);
				System.out.println("reference: "+reference);
				e.printStackTrace();
			}
			
				
			if (type!=null)
				{
				//System.out.println("resolved to "+typeSystemResolver.getTypeName(type)+" with "+type.eContents());
				return Scopes.scopeFor(type.eContents());
				}
			else {
				System.out.println("Unable to resolve context: "+context);
				System.out.println("reference: "+reference);
			}
			return Scopes.scopeFor(Lists.<EObject>newArrayList());
			
		} else if (reference.getName().equals("action")) {
			if (Route.class.isAssignableFrom(context.getClass())) {
				Route r = (Route) context;
				
				
				
				return Scopes.scopeFor(r.getCtrl().getFeatures());
				
				 
			}
			
			return Scopes.scopeFor(Lists.<EObject>newArrayList());
		}

		return super.getScope(context, reference);
	}

}
