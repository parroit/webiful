/*
 * generated by Xtext
 */
package eban.scoping;

import eban.TypeSystemResolver;
import eban.webiful.Controller;
import eban.webiful.MemberCall;
import eban.webiful.Route;
import eban.webiful.Type;


import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import com.google.common.collect.Lists;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class WebifulScopeProvider extends AbstractDeclarativeScopeProvider {

	

	@Override
	public IScope getScope(EObject context, EReference reference) {
		
		IScope scope = super.getScope(context, reference);
		
		
		if (reference.getName().equals("member")) {
			if (MemberCall.class.isAssignableFrom(context.getClass())) {
				MemberCall meth = (MemberCall) context;
				TypeSystemResolver typeSystemResolver = new TypeSystemResolver();
				Type type=typeSystemResolver.resolveType(meth.getCaller());
				
				System.out.println("Type for "+meth.getCaller()+" resolved to "+ typeSystemResolver.getTypeName(type));
				
				if (type==null)
					scope=Scopes.scopeFor(Lists.<EObject>newArrayList());
				else 
					scope = Scopes.scopeFor(type.eContents());	
				
					
				
				 
			} else 
				scope=Scopes.scopeFor(Lists.<EObject>newArrayList());
		} else if (reference.getName().equals("action")) {
			if (Route.class.isAssignableFrom(context.getClass())) {
				Route r = (Route) context;
				
				
				
				scope = Scopes.scopeFor(r.getCtrl().getFeatures());
				
				 
			} else 
				scope=Scopes.scopeFor(Lists.<EObject>newArrayList());
		}

		return scope;
	}

}
